#################
# CONFIGURATION #
#################
#OPERATOR
Constraints.OpSpecification.Algorithm.name=WIND_MultiJoin
#ENGINE
Constraints.Engine=SparkSQL
Constraints.EngineSpecification.Distributed.SparkSQL.masterLocation=hdp1
#INPUT( mandatory)
Constraints.Input.number=4
#Input0
Constraints.Input0.type=SQL
Constraints.Input0.Engine.SQL=SparkSQL
Constraints.Input0.Engine.location=hdp1
#Input1
Constraints.Input1.type=SQL
Constraints.Input1.Engine.SQL=SparkSQL
Constraints.Input1.Engine.location=hdp1
#Input2
Constraints.Input2.type=SQL
Constraints.Input2.Engine.SQL=SparkSQL
Constraints.Input3.Engine.location=hdp1
#Input3
Constraints.Input3.type=SQL
Constraints.Input3.Engine.SQL=SparkSQL
Constraints.Input3.Engine.location=hdp1
#OUTPUT( mandatory)
Constraints.Output.number=1
Constraints.Output0.type=SQL
Constraints.Output0.Engine.SQL=SparkSQL
Constraints.Output0.Engine.location=hdp1
#PREPARED STATEMENT
Constraints.OpSpecification.SQL_query="SELECT $3 FROM $1 WHERE $2"

############
# MODELING #
############
#OPTIMIZATION DIMENSIONS( mandatory, at least one)
#type,min_value,max_value,step
Optimization.inputSpace.In0.size=Double,1E7,1E10,l
Optimization.inputSpace.In1.size=Double,1E7,1E10,l
#OPTIMIZATION METRIC( mandatory, at least one)
Optimization.outputSpace.execTime=Double
Optimization.outputSpace.Out0.size=Double
Optimization.outputSpace.cost=Double
#optimization metric function
Optimization.model.execTime=gr.ntua.ece.cslab.panic.core.models.AbstractWekaModel
Optimization.model.Out0.size=gr.ntua.ece.cslab.panic.core.models.UserFunction
Optimization.Out0.size=(In0.size+In1.size)*0.1
Optimization.model.cost=gr.ntua.ece.cslab.panic.core.models.UserFunction
Optimization.cost=1.0

#############
# EXECUTION #
#############
#LUA CONFIGURATION FILE( mandatory)
Execution.LuaScript=WIND_MultiJoin_Postgres.lua
#EXECUTION ARGUMENTS( optional)
Execution.Arguments.number=5
Execution.Argument0="test_data a, cp_base b, am, bm"
Execution.Argument1="a.rid = b.rid and a.hour = b.hour and a.dow = b.dow and b.dow= bm.dow and a.doy = am.doy"
Execution.Argument2="a.rid, a.hour, a.doy, a.dow, a.num as anum, b.num as bnum"
Execution.Argument3=big_join
Execution.Argument4=dbname
#EXECUTION OUTPUT( mandatory)
Execution.Output0.name=big_join
Execution.Output0.schema=(*)
